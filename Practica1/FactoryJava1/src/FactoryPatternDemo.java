/*
  Demostraci√≥n del Patr√≥n Factory en Java
  Este archivo contiene una implementaci√≥n simple del patr√≥n de dise√±o Factory.
  Permite crear distintos tipos de veh√≠culos (Coche, Motocicleta, Camion) a trav√©s
  de una f√°brica (VehiculoFactory) que encapsula la l√≥gica de instanciaci√≥n
  y validaci√≥n de par√°metros. Adem√°s, incluye una clase Bicicleta como ejemplo
  de c√≥mo extender el sistema con nuevos tipos que implementen la misma interfaz.

  Estructura:
  - interface Vehiculo: Contrato com√∫n para todos los veh√≠culos.
  - Clases concretas: Coche, Motocicleta, Camion, Bicicleta.
  - enum TipoVehiculo: Tipos soportados por la f√°brica.
  - class VehiculoFactory: Punto √∫nico de creaci√≥n de veh√≠culos.
  - class FactoryPatternDemo (con main): Secuencia de demostraci√≥n del patr√≥n.

  Contrato que define las capacidades b√°sicas que todo veh√≠culo del sistema debe tener.
 */
interface Vehiculo {
    /*
     Simula la acci√≥n de acelerar del veh√≠culo.
     */
    void acelerar();

    /*
      Simula la acci√≥n de frenar del veh√≠culo.
     */
    void frenar();

    /*
     Muestra la informaci√≥n descriptiva del veh√≠culo (tipo, caracter√≠sticas principales).
     */
    void mostrarInfo();
}

/*
  Implementaci√≥n concreta de un veh√≠culo tipo Coche.
  Encapsula la marca y el modelo, y expone comportamientos b√°sicos.
 */
class Coche implements Vehiculo {
    /** Marca del coche (por ejemplo, "Toyota"). */
    private String marca;
    /** Modelo del coche (por ejemplo, "Corolla"). */
    private String modelo;

    /*
      Crea un nuevo coche.
      @param marca  marca del coche
      @param modelo modelo del coche
     */
    public Coche(String marca, String modelo) {
        this.marca = marca;
        this.modelo = modelo;
    }

    /*
      Mensaje representando la aceleraci√≥n espec√≠fica de un coche.
     */
    @Override
    public void acelerar() {
        System.out.println("El coche " + marca + " " + modelo + " est√° acelerando por la carretera");
    }

    /*
      Mensaje representando el frenado de un coche.
     */
    @Override
    public void frenar() {
        System.out.println("El coche est√° frenando con frenos de disco");
    }

    /*
      Muestra una descripci√≥n breve del coche.
     */
    @Override
    public void mostrarInfo() {
        System.out.println("üöó Coche: " + marca + " " + modelo + " - 4 ruedas, motor a gasolina");
    }
}

/*
  Implementaci√≥n concreta de un veh√≠culo tipo Motocicleta.
  Encapsula marca y cilindrada (en cc).
 */
class Motocicleta implements Vehiculo {
    /* Marca de la motocicleta (por ejemplo, "Yamaha"). */
    private String marca;
    /* Cilindrada en cent√≠metros c√∫bicos (por ejemplo, 250). */
    private int cilindrada;

    /*
      Crea una nueva motocicleta.
      @param marca       marca de la motocicleta
      @param cilindrada  cilindrada en cc
     */
    public Motocicleta(String marca, int cilindrada) {
        this.marca = marca;
        this.cilindrada = cilindrada;
    }

    /*
      Mensaje representando la aceleraci√≥n de una motocicleta.
     */
    @Override
    public void acelerar() {
        System.out.println("La motocicleta " + marca + " est√° acelerando con " + cilindrada + "cc");
    }

    /*
      Mensaje representando el frenado de una motocicleta.
     */
    @Override
    public void frenar() {
        System.out.println("La motocicleta est√° frenando con precauci√≥n");
    }

    /*
      Muestra una descripci√≥n breve de la motocicleta.
     */
    @Override
    public void mostrarInfo() {
        System.out.println("üèçÔ∏è Motocicleta: " + marca + " " + cilindrada + "cc - 2 ruedas, √°gil y r√°pida");
    }
}

/*
  Implementaci√≥n concreta de un veh√≠culo tipo Camion.
  Encapsula la marca y la capacidad de carga (en toneladas).
 */
class Camion implements Vehiculo {
    /* Marca del cami√≥n (por ejemplo, "Volvo"). */
    private String marca;
    /* Capacidad de carga en toneladas (por ejemplo, 15.0). */
    private double capacidadCarga;

    /*
      Crea un nuevo cami√≥n.
      @param marca           marca del cami√≥n
      @param capacidadCarga  capacidad en toneladas
     */
    public Camion(String marca, double capacidadCarga) {
        this.marca = marca;
        this.capacidadCarga = capacidadCarga;
    }

    /*
      Mensaje representando la aceleraci√≥n de un cami√≥n (m√°s lenta y pesada).
     */
    @Override
    public void acelerar() {
        System.out.println("El cami√≥n " + marca + " est√° acelerando lentamente con " + capacidadCarga + " toneladas");
    }

    /*
      Mensaje representando el frenado de un cami√≥n.
     */
    @Override
    public void frenar() {
        System.out.println("El cami√≥n est√° frenando con sistema de frenos neum√°tico");
    }

    /*
      Muestra una descripci√≥n breve del cami√≥n.
     */
    @Override
    public void mostrarInfo() {
        System.out.println("üöõ Cami√≥n: " + marca + " - Capacidad: " + capacidadCarga + " toneladas");
    }
}

/*
  Enumeraci√≥n con los tipos de veh√≠culos soportados por la f√°brica.
 */
enum TipoVehiculo {
    /** Coche de 4 ruedas. */
    COCHE,
    /** Motocicleta de 2 ruedas. */
    MOTOCICLETA,
    /** Cami√≥n de carga. */
    CAMION
}

/*
  F√°brica centralizada responsable de crear instancias de {@link Vehiculo} seg√∫n su tipo.
  Encapsula la l√≥gica de parseo/validaci√≥n de par√°metros y provee valores por defecto.
 */
class VehiculoFactory {

    /*
      Crea un veh√≠culo del tipo indicado, a partir de par√°metros variables (varargs).

      Convenci√≥n de par√°metros por tipo:
      - COCHE:        [0]=marca, [1]=modelo
      - MOTOCICLETA:  [0]=marca, [1]=cilindrada (int como String)
      - CAMION:       [0]=marca, [1]=capacidad (double como String)
      Si faltan par√°metros o su formato no es v√°lido, se usan valores por defecto razonables.
      @param tipo        tipo de veh√≠culo a crear
      @param parametros  par√°metros espec√≠ficos del tipo (ver convenci√≥n)
      @return instancia concreta de Vehiculo
      @throws IllegalArgumentException si el tipo no es soportado
     */
    public static Vehiculo crearVehiculo(TipoVehiculo tipo, String... parametros) {
        switch (tipo) {
            case COCHE:
                if (parametros.length >= 2) {
                    return new Coche(parametros[0], parametros[1]);
                } else {
                    // Valor por defecto
                    return new Coche("Toyota", "Corolla");
                }

            case MOTOCICLETA:
                if (parametros.length >= 2) {
                    try {
                        int cilindrada = Integer.parseInt(parametros[1]);
                        return new Motocicleta(parametros[0], cilindrada);
                    } catch (NumberFormatException e) {
                        // Si no se puede parsear, usar cilindrada por defecto
                        return new Motocicleta(parametros[0], 250);
                    }
                } else {
                    return new Motocicleta("Yamaha", 250);
                }

            case CAMION:
                if (parametros.length >= 2) {
                    try {
                        double capacidad = Double.parseDouble(parametros[1]);
                        return new Camion(parametros[0], capacidad);
                    } catch (NumberFormatException e) {
                        // Si no se puede parsear, usar capacidad por defecto
                        return new Camion(parametros[0], 10.0);
                    }
                } else {
                    return new Camion("Volvo", 15.0);
                }

            default:
                throw new IllegalArgumentException("Tipo de veh√≠culo no soportado: " + tipo);
        }
    }

    /*
      Crea un veh√≠culo del tipo indicado usando valores por defecto.
      @param tipo tipo de veh√≠culo a crear
      @return instancia concreta con par√°metros por defecto
     */
    public static Vehiculo crearVehiculoPorDefecto(TipoVehiculo tipo) {
        return crearVehiculo(tipo);
    }
}

/*
  Clase de arranque que demuestra el uso del patr√≥n Factory para crear distintos veh√≠culos.
 */
public class FactoryPatternDemo {

    /*
      Punto de entrada. Ejecuta una secuencia de pasos para demostrar:
      1) Mostrar informaci√≥n de diferentes veh√≠culos
      2) Acelerar todos los veh√≠culos
      3) Frenar todos los veh√≠culos
      4) Crear veh√≠culos din√°micamente a partir de una entrada de texto (simulada)
      @param args argumentos de l√≠nea de comandos (no usados)
     */
    public static void main(String[] args) {
        System.out.println("=== DEMOSTRACI√ìN DEL PATR√ìN FACTORY ===\n");

        // 1) Creaci√≥n expl√≠cita con par√°metros
        Vehiculo coche1 = VehiculoFactory.crearVehiculo(TipoVehiculo.COCHE, "Honda", "Civic");
        Vehiculo moto1 = VehiculoFactory.crearVehiculo(TipoVehiculo.MOTOCICLETA, "Kawasaki", "600");
        Vehiculo camion1 = VehiculoFactory.crearVehiculo(TipoVehiculo.CAMION, "Mercedes", "12.5");

        // 2) Creaci√≥n usando valores por defecto
        Vehiculo coche2 = VehiculoFactory.crearVehiculoPorDefecto(TipoVehiculo.COCHE);
        Vehiculo moto2 = VehiculoFactory.crearVehiculoPorDefecto(TipoVehiculo.MOTOCICLETA);

        // Conjunto de veh√≠culos a operar
        Vehiculo[] vehiculos = {coche1, moto1, camion1, coche2, moto2};

        // Mostrar informaci√≥n
        System.out.println("1. INFORMACI√ìN DE VEH√çCULOS:");
        System.out.println("----------------------------");
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.mostrarInfo();
        }

        // Acelerar
        System.out.println("\n2. ACELERANDO TODOS LOS VEH√çCULOS:");
        System.out.println("----------------------------------");
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.acelerar();
        }

        // Frenar
        System.out.println("\n3. FRENANDO TODOS LOS VEH√çCULOS:");
        System.out.println("--------------------------------");
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.frenar();
        }

        // Demostraci√≥n de creaci√≥n din√°mica a partir de texto (p.ej., input de usuario)
        System.out.println("\n4. CREACI√ìN DIN√ÅMICA BASADA EN INPUT:");
        System.out.println("-------------------------------------");

        String[] tiposInput = {"COCHE", "MOTOCICLETA", "CAMION"};

        for (String tipoStr : tiposInput) {
            try {
                TipoVehiculo tipo = TipoVehiculo.valueOf(tipoStr);
                Vehiculo vehiculo = VehiculoFactory.crearVehiculoPorDefecto(tipo);
                System.out.print("Creado din√°micamente: ");
                vehiculo.mostrarInfo();
            } catch (IllegalArgumentException e) {
                System.out.println("Tipo de veh√≠culo no v√°lido: " + tipoStr);
            }
        }

        System.out.println("\n=== FIN DE LA DEMOSTRACI√ìN ===");
    }
}

/*
  Implementaci√≥n concreta de un veh√≠culo tipo Bicicleta.
  NOTA: Esta clase no est√° integrada en la f√°brica ni en el enum.
  Se incluye como ejemplo de c√≥mo a√±adir un nuevo tipo de veh√≠culo
  que cumple el contrato sin modificar las clases existentes.
 */
class Bicicleta implements Vehiculo {
    /* Tipo de bicicleta (por ejemplo, "monta√±a", "urbana"). */
    private String tipo;
    /* N√∫mero de velocidades del sistema de cambios. */
    private int numVelocidades;

    /*
      Crea una nueva bicicleta.
      @param tipo            tipo de bicicleta
      @param numVelocidades  n√∫mero de velocidades
     */
    public Bicicleta(String tipo, int numVelocidades) {
        this.tipo = tipo;
        this.numVelocidades = numVelocidades;
    }

    /*
      Mensaje representando el esfuerzo de pedaleo (aceleraci√≥n humana).
     */
    @Override
    public void acelerar() {
        System.out.println("La bicicleta " + tipo + " est√° siendo pedaleada");
    }

    /*
      Mensaje representando el frenado de una bicicleta.
     */
    @Override
    public void frenar() {
        System.out.println("La bicicleta est√° frenando con frenos de mano");
    }

    /*
      Muestra una descripci√≥n breve de la bicicleta.
     */
    @Override
    public void mostrarInfo() {
        System.out.println("üö≤ Bicicleta: " + tipo + " - " + numVelocidades + " velocidades, ecol√≥gica");
    }
}
