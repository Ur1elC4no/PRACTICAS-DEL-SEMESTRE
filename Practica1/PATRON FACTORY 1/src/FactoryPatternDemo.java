/*
 Demostraci√≥n del Patr√≥n Factory en Java.
 
 Este archivo define y demuestra:
 - interface Vehiculo: contrato com√∫n para distintos tipos de veh√≠culos.
 - clases concretas Coche, Motocicleta, Camion y Bicicleta: implementaciones de Vehiculo.
 - enum TipoVehiculo: tipos soportados por la f√°brica.
 - clase VehiculoFactory: encapsula la l√≥gica de creaci√≥n (Factory Method est√°tico).
 - clase FactoryPatternDemo: punto de entrada que ejecuta una demostraci√≥n paso a paso.
 
 Todas las explicaciones est√°n documentadas usando comentarios de bloque (/* */).
*/

interface Vehiculo {
    /* M√©todo de comportamiento: acelera el veh√≠culo (incrementa su velocidad o simula el inicio del movimiento). */
    void acelerar();
    /* M√©todo de comportamiento: desacelera o detiene gradualmente el veh√≠culo. */
    void frenar();
    /* M√©todo utilitario: imprime informaci√≥n relevante del veh√≠culo (identidad y caracter√≠sticas clave). */
    void mostrarInfo();
}

/* Implementaci√≥n de Vehiculo que representa un coche (autom√≥vil de 4 ruedas). */
class Coche implements Vehiculo {
    /* Marca del coche (fabricante). */
    private String marca;
    /* Modelo del coche (l√≠nea o versi√≥n espec√≠fica). */
    private String modelo;

    /* Constructor: inicializa el coche con su marca y modelo. */
    public Coche(String marca, String modelo) {
        this.marca = marca;
        this.modelo = modelo;
    }

    /* Implementaci√≥n espec√≠fica de acelerar para un coche. */
    @Override
    public void acelerar() {
        System.out.println("El coche " + marca + " " + modelo + " est√° acelerando por la carretera");
    }

    /* Implementaci√≥n espec√≠fica de frenar para un coche. */
    @Override
    public void frenar() {
        System.out.println("El coche est√° frenando con frenos de disco");
    }

    /* Muestra la informaci√≥n descriptiva del coche. */
    @Override
    public void mostrarInfo() {
        System.out.println("üöó Coche: " + marca + " " + modelo + " - 4 ruedas, motor a gasolina");
    }
}

/* Implementaci√≥n de Vehiculo que representa una motocicleta (2 ruedas). */
class Motocicleta implements Vehiculo {
    /* Marca del fabricante de la motocicleta. */
    private String marca;
    /* Capacidad de cilindrada del motor en cent√≠metros c√∫bicos (cc). */
    private int cilindrada;

    /* Constructor: inicializa la motocicleta con marca y cilindrada. */
    public Motocicleta(String marca, int cilindrada) {
        this.marca = marca;
        this.cilindrada = cilindrada;
    }

    /* Implementaci√≥n espec√≠fica de acelerar para una motocicleta. */
    @Override
    public void acelerar() {
        System.out.println("La motocicleta " + marca + " est√° acelerando con " + cilindrada + "cc");
    }

    /* Implementaci√≥n espec√≠fica de frenar para una motocicleta. */
    @Override
    public void frenar() {
        System.out.println("La motocicleta est√° frenando con precauci√≥n");
    }

    /* Muestra la informaci√≥n descriptiva de la motocicleta. */
    @Override
    public void mostrarInfo() {
        System.out.println("üèçÔ∏è Motocicleta: " + marca + " " + cilindrada + "cc - 2 ruedas, √°gil y r√°pida");
    }
}

/* Implementaci√≥n de Vehiculo que representa un cami√≥n (veh√≠culo de carga). */
class Camion implements Vehiculo {
    /* Marca del cami√≥n. */
    private String marca;
    /* Capacidad de carga en toneladas. */
    private double capacidadCarga;

    /* Constructor: inicializa el cami√≥n con marca y capacidad de carga. */
    public Camion(String marca, double capacidadCarga) {
        this.marca = marca;
        this.capacidadCarga = capacidadCarga;
    }

    /* Implementaci√≥n espec√≠fica de acelerar para un cami√≥n (m√°s lenta por su peso). */
    @Override
    public void acelerar() {
        System.out.println("El cami√≥n " + marca + " est√° acelerando lentamente con " + capacidadCarga + " toneladas");
    }

    /* Implementaci√≥n espec√≠fica de frenar para un cami√≥n (sistema neum√°tico). */
    @Override
    public void frenar() {
        System.out.println("El cami√≥n est√° frenando con sistema de frenos neum√°tico");
    }

    /* Muestra la informaci√≥n descriptiva del cami√≥n. */
    @Override
    public void mostrarInfo() {
        System.out.println("üöõ Cami√≥n: " + marca + " - Capacidad: " + capacidadCarga + " toneladas");
    }
}

/* Enumeraci√≥n que define los tipos de veh√≠culos soportados por la f√°brica. */
enum TipoVehiculo {
    COCHE, MOTOCICLETA, CAMION
}

/* Clase f√°brica que centraliza la creaci√≥n de objetos Vehiculo seg√∫n el tipo solicitado. */
class VehiculoFactory {

    /*
     M√©todo de f√°brica principal: crea instancias de Vehiculo en funci√≥n de 'tipo'.
     - parametros es un arreglo variable (varargs) que contiene los datos necesarios para construir cada tipo:
       * COCHE: [marca, modelo]
       * MOTOCICLETA: [marca, cilindradaComoString]
       * CAMION: [marca, capacidadComoString]
     - Si faltan par√°metros o hay errores de formato num√©rico, se aplican valores por defecto seguros.
    */
    public static Vehiculo crearVehiculo(TipoVehiculo tipo, String... parametros) {
        switch (tipo) {
            case COCHE:
                /* Crea un Coche con marca y modelo; usa valores por defecto si faltan. */
                if (parametros.length >= 2) {
                    return new Coche(parametros[0], parametros[1]);
                } else {
                    return new Coche("Toyota", "Corolla");
                }

            case MOTOCICLETA:
                /* Crea una Motocicleta con marca y cilindrada; intenta parsear la cilindrada. */
                if (parametros.length >= 2) {
                    try {
                        int cilindrada = Integer.parseInt(parametros[1]);
                        return new Motocicleta(parametros[0], cilindrada);
                    } catch (NumberFormatException e) {
                        /* Si la cilindrada no es un n√∫mero v√°lido, usa 250cc por defecto. */
                        return new Motocicleta(parametros[0], 250);
                    }
                } else {
                    return new Motocicleta("Yamaha", 250);
                }

            case CAMION:
                /* Crea un Cami√≥n con marca y capacidad; intenta parsear la capacidad (toneladas). */
                if (parametros.length >= 2) {
                    try {
                        double capacidad = Double.parseDouble(parametros[1]);
                        return new Camion(parametros[0], capacidad);
                    } catch (NumberFormatException e) {
                        /* Si la capacidad no es v√°lida, usa 10.0 toneladas por defecto. */
                        return new Camion(parametros[0], 10.0);
                    }
                } else {
                    return new Camion("Volvo", 15.0);
                }

            default:
                /* Protecci√≥n ante tipos no soportados. */
                throw new IllegalArgumentException("Tipo de veh√≠culo no soportado: " + tipo);
        }
    }

    /* M√©todo de conveniencia: crea un veh√≠culo del tipo dado con par√°metros por defecto. */
    public static Vehiculo crearVehiculoPorDefecto(TipoVehiculo tipo) {
        return crearVehiculo(tipo);
    }
}

/* Clase principal con el m√©todo main: ejecuta la demostraci√≥n del patr√≥n Factory. */
public class FactoryPatternDemo {

    /* Punto de entrada del programa: orquesta la creaci√≥n y uso de veh√≠culos. */
    public static void main(String[] args) {
        System.out.println("=== DEMOSTRACI√ìN DEL PATR√ìN FACTORY ===\n");

        /* Creaci√≥n expl√≠cita de instancias usando la f√°brica con par√°metros espec√≠ficos. */
        Vehiculo coche1 = VehiculoFactory.crearVehiculo(TipoVehiculo.COCHE, "Honda", "Civic");
        Vehiculo moto1 = VehiculoFactory.crearVehiculo(TipoVehiculo.MOTOCICLETA, "Kawasaki", "600");
        Vehiculo camion1 = VehiculoFactory.crearVehiculo(TipoVehiculo.CAMION, "Mercedes", "12.5");

        /* Creaci√≥n usando valores por defecto para cada tipo. */
        Vehiculo coche2 = VehiculoFactory.crearVehiculoPorDefecto(TipoVehiculo.COCHE);
        Vehiculo moto2 = VehiculoFactory.crearVehiculoPorDefecto(TipoVehiculo.MOTOCICLETA);

        /* Colecci√≥n heterog√©nea que demuestra el polimorfismo de la interfaz Vehiculo. */
        Vehiculo[] vehiculos = {coche1, moto1, camion1, coche2, moto2};

        /* Secci√≥n 1: Mostrar informaci√≥n de cada veh√≠culo. */
        System.out.println("1. INFORMACI√ìN DE VEH√çCULOS:");
        System.out.println("----------------------------");
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.mostrarInfo();
        }

        /* Secci√≥n 2: Acelerar todos los veh√≠culos. */
        System.out.println("\n2. ACELERANDO TODOS LOS VEH√çCULOS:");
        System.out.println("----------------------------------");
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.acelerar();
        }

        /* Secci√≥n 3: Frenar todos los veh√≠culos. */
        System.out.println("\n3. FRENANDO TODOS LOS VEH√çCULOS:");
        System.out.println("--------------------------------");
        for (Vehiculo vehiculo : vehiculos) {
            vehiculo.frenar();
        }

        /* Secci√≥n 4: Ejemplo de creaci√≥n din√°mica basada en entrada de texto. */
        System.out.println("\n4. CREACI√ìN DIN√ÅMICA BASADA EN INPUT:");
        System.out.println("-------------------------------------");

        /* Entradas de ejemplo que simulan valores capturados desde el exterior (e.g., UI/CLI). */
        String[] tiposInput = {"COCHE", "MOTOCICLETA", "CAMION"};

        for (String tipoStr : tiposInput) {
            try {
                /* Convertir el texto al valor del enum y crear una instancia por defecto. */
                TipoVehiculo tipo = TipoVehiculo.valueOf(tipoStr);
                Vehiculo vehiculo = VehiculoFactory.crearVehiculoPorDefecto(tipo);
                System.out.print("Creado din√°micamente: ");
                vehiculo.mostrarInfo();
            } catch (IllegalArgumentException e) {
                /* Captura entradas inv√°lidas que no correspondan al enum. */
                System.out.println("Tipo de veh√≠culo no v√°lido: " + tipoStr);
            }
        }

        System.out.println("\n=== FIN DE LA DEMOSTRACI√ìN ===");
    }
}

/* Implementaci√≥n adicional de Vehiculo que representa una bicicleta (propulsi√≥n humana).
   Nota: No se utiliza en la demo anterior, pero muestra c√≥mo a√±adir nuevos tipos sin
   modificar la interfaz ni el c√≥digo cliente, manteniendo abierto/cerrado (OCP). */
class Bicicleta implements Vehiculo {
    /* Tipo de bicicleta (por ejemplo, monta√±a, ruta, urbana). */
    private String tipo;
    /* N√∫mero de velocidades o relaciones del sistema de cambios. */
    private int numVelocidades;

    /* Constructor: inicializa la bicicleta con su tipo y n√∫mero de velocidades. */
    public Bicicleta(String tipo, int numVelocidades) {
        this.tipo = tipo;
        this.numVelocidades = numVelocidades;
    }

    /* Implementaci√≥n de acelerar: simula el pedaleo. */
    @Override
    public void acelerar() {
        System.out.println("La bicicleta " + tipo + " est√° siendo pedaleada");
    }

    /* Implementaci√≥n de frenar: simula el uso de frenos de mano. */
    @Override
    public void frenar() {
        System.out.println("La bicicleta est√° frenando con frenos de mano");
    }

    /* Muestra la informaci√≥n descriptiva de la bicicleta. */
    @Override
    public void mostrarInfo() {
        System.out.println("üö≤ Bicicleta: " + tipo + " - " + numVelocidades + " velocidades, ecol√≥gica");
    }
}
